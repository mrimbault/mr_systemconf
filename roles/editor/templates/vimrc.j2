"==============================================================================
" Vim main configuration file
"
" "Don't put any lines in your vimrc that you don't understand."
" (from: https://dougblack.io/words/a-good-vimrc.html)
"
" Disable old vi compatibility mode.
if &compatible
  set nocompatible
endif

"==============================================================================
" Vim package manager: vim-plug
" Source: https://github.com/junegunn/vim-plug
" Installed using:
"   git clone https://github.com/junegunn/vim-plug
"   ln -s vim-plug/plug.vim ~/.vim/autoload/
" - FIXME install somewhere else ?
"
" Plugin manager commands:
" - :PlugInstall  -> Install plugins
" - :PlugUpdate   -> Install or update plugins
" - :PlugClean[!] -> Remove unused directories
" - :PlugUpgrade  -> Upgrade vim-plug itself
" - :PlugStatus   -> Check the status of plugins
" - :PlugDiff     -> Examine changes from the previous update and the pending
"                    changes
" - :PlugSnapshot[!] [output path] -> Generate script for restoring the current
"                                     snapshot of the plugins
"
" Plugins installation block follows.
call plug#begin('~/.vim/plugged')
  " Git wrapper
  Plug 'tpope/vim-fugitive'
  " Shows signs at lines with quickfix items
  Plug 'tomtom/quickfixsigns_vim'
  " Full path fuzzy file, buffer, mru, tag, ... finder
  Plug 'ctrlpvim/ctrlp.vim'
  " Undo tree browser
  Plug 'vim-scripts/Gundo'
  " Open file tags browser
  Plug 'majutsushi/tagbar'
  " Syntax checker
  Plug 'scrooloose/syntastic'
  " Cscope helper
  Plug 'brookhong/cscope.vim'
  " Dokuwiki syntax
  Plug 'nblock/vim-dokuwiki'
  " Advanced statusbar
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  " Add the possibility to create custom modes
  Plug 'kana/vim-submode'
  " Color schemes:
  Plug 'sjl/badwolf'
  Plug 'morhetz/gruvbox'
  Plug 'ayu-theme/ayu-vim'
  Plug 'NLKNguyen/papercolor-theme'
call plug#end()


" FIXME check vimux and Tmux navigator: https://blog.bugsnag.com/tmux-and-vim/
" Plug 'christoomey/vim-tmux-navigator'

"==============================================================================
" Plugin vim-airline
"--------------------
" Airline status/tabline for vim.
" https://github.com/vim-airline/vim-airline
" https://powerline.readthedocs.org/en/latest/installation/linux.html#font-installation
"
" Color theme configuration.
" vim-airline-themes: Airline themes
" Source: https://github.com/vim-airline/vim-airline-themes
"
" Airline status bar sections:
"+----------------------------------------------------------------------------+
"| A | B |                    C                            X | Y | Z |  [...] |
"+----------------------------------------------------------------------------+
"
" Default configuration:
"    A    displays the mode + additional flags like crypt/spell/paste (INSERT)
"    B    VCS/Git information (branch, hunk summary) (master)
"    C    filename + read-only flag (~/.vim/vimrc RO)
"    X    filetype (vim)
"    Y    file encoding[fileformat] (utf-8[unix])
"    Z    current position in the file
"[...]    additional sections (warning/errors/statistics) from external
"         plugins (e.g. YCM, syntastic, ...)
"
" The information in Section Z looks like this:
" 10% ☰ 10/100 ln : 20
"
" This means:
"     10%  - 10 percent down the top of the file
"    ☰ 10  - current line 10
" /100 ln  - of 100 lines
"    : 20  - current column 20
"
" See |airline-intro| for full explanations about statusbar sections.
"
" Automatically displays all buffers when there's only one tab open:
let g:airline#extensions#tabline#enabled = 1
" Fonts for nice status line:
let g:airline_powerline_fonts = 1
" Enable extensions support:
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#syntastic#enabled  = 1

"==============================================================================
" Plugin vim-submodule
"----------------------
" Provide the way to define "submodes" to the built-in |vim-modes|.
" Source: https://github.com/kana/vim-submode
"
" A message will appear in the message line when you're in a submode and stay
" there until the mode has exited, even when showmode is disabled (when using
" vim-airline for instance):
let g:submode_always_show_submode = 1
" Enabled mode stays open until leave, no timeout:
let g:submode_timeout = 0

"==============================================================================
" Plugin Tmux navigator
"--------------------------
" Seamless navigation between tmux panes and vim splits.
" Source: https://github.com/christoomey/vim-tmux-navigator
"
" Configure custom mappings instead of default ones:
"let g:tmux_navigator_no_mappings = 1
" Disable tmux navigator when zooming the Vim pane:
"let g:tmux_navigator_disable_when_zoomed = 1

"==============================================================================
" Plugin quickfixsigns_vim
"--------------------------
" Shows signs at lines with quickfix items (e.g. errors, shown on the left
" column).  Used for showing errors, git diffs, marks, etc.
" Source: https://github.com/tomtom/quickfixsigns_vim
" Doc: |quickfixsigns.txt|
"
" Use basic Vim diff colors (better supported by color schemes) instead of
" custom ones:
let g:quickfixsigns#vcsdiff#highlight = {'DEL': 'DiffDelete', 'ADD': 'DiffAdd', 'CHANGE': 'DiffChange'}

"==============================================================================
" Plugin syntastic
"------------------
" Syntax checking plugin.
" Source: https://github.com/vim-syntastic/syntastic
" Requires external syntax checkers
" Install external syntax checkers: :help syntastic-checkers
"   - FIXME TODO
"   - ansible-lint
"   - etc.
" FIXME check if Airlines automatically includes errors
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"==============================================================================
" Plugin vim-fugitive
"---------------------
" Git wrapper.
" https://github.com/tpope/vim-fugitive
" Note: ":Gbrowse" requires plugins for working with web front-ends.  For
" example GitHub: https://github.com/tpope/vim-rhubarb
" FIXME add custom maps ?

"==============================================================================
" Plugin CtrlP
"--------------
" Full path fuzzy file, buffer, mru, tag, ... finder.
" Source: https://github.com/ctrlpvim/ctrlp.vim
" Usage: https://github.com/ctrlpvim/ctrlp.vim#basic-usage
"
" FIXME CtrlP configuration:
" http://snow-dev.com/the-power-of-vim-plugins-ctrlp/
"
" Enable CtrlP extensions:
let g:ctrlp_extensions = ['tag', 'quickfix', 'line', 'bookmarkdir', 'dir', 'mixed']
" Let CtrlP use git listing commands if there is a ".git" directory:
"let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files']
" FIXME Variant also listing untracked files (slower):
let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files --exclude-standard -co']
"
" Change default CtrlP map:
let g:ctrlp_map = '<c-p><c-f>'
" Other CtrlP related maps are on the global mapping section.

"==============================================================================
" Plugin Gundo
"--------------
" Visualize Vim undo tree.
" Source: https://github.com/vim-scripts/Gundo
" Doc: https://github.com/vim-scripts/Gundo/blob/master/doc/gundo.txt
"
" Undo items window size:
let g:gundo_width = 35
" Preview window size:
let g:gundo_preview_height = 15

"==============================================================================
" Plugin tagbar
"---------------
" Permit to browse the tags of the current file and get an overview of its
" structure.  Provides a sidebar that displays the ctags-generated tags of the
" current file, ordered by their scope.
" Source: https://github.com/majutsushi/tagbar
" Requires ctags to be installed on the system
"
" Open Tagbar window left of screen:
let g:tagbar_left = 1

"==============================================================================
" Plugin Cscove
"---------------
" Helps browsing a project: by navigating to a word/symbol/function and
" calling cscope (usually with shortcut keys) it can find: functions calling
" the function, the function definition, and more.
" Source: https://github.com/brookhong/cscope.vim
"
" FIXME how to create cscope db
"       how to use it (":tag" command ?)
"       custom mappings ?
"
" FIXME what about https://github.com/ludovicchabant/vim-gutentags ?
" -> it has airline integration

"==============================================================================
" Plugin deoplete
"-----------------
" FIXME extensible and asynchronous completion framework
" Source: https://github.com/Shougo/deoplete.nvim


"==============================================================================
" Plugin YouCompleteMe
"----------------------
" FIXME syntax completion plugin
" Source: https://github.com/Valloric/YouCompleteMe


"==============================================================================
" Plugin obsession
"----------------------
" FIXME automatically record session status and restore them
" Source: https://github.com/tpope/vim-obsession

"==============================================================================
" Global configuration
"----------------------

" FIXME not required ?
"filetype plugin indent on
"syntax enable

" FIXME disable mouse integration ?
" set mouse= ???

" FIXME used by CtrlP ?
set wildignore+=*.o

" FIXME
set wildmode=longest:list,full
set wildmenu
if exists("&wildignorecase")
    set wildignorecase
endif
set showfulltag

" Enable line numbers:
set number

" Starts scrolling 5 lines before the edge of the visible window:
set scrolloff=5

" Always ask for confirmation for a command that may fail (like quit with
" unwritten modifications):
set confirm

" Always show tab and status lines:
set showtabline=2
set laststatus=2

" Briefly jumps to matching surrounding character (like "(") when one is
" typed:
set showmatch

" Add support for two-spaces ending sentences in |text-objects|.
" Why two spaces?  See: http://stevelosh.com/blog/2012/10/why-i-two-space/
set cpoptions+=J

" Automatically splits lines when 79 characters long or more:
" FIXME disabled, annoying ?
" FIXME add a mapping to do it to current or selected lines ?
" FIXME part of formatting commands: only usefulls while editing plain text
" files (or similar, like markdown), and comments
" see: http://blog.ezyang.com/2010/03/vim-textwidth/
" and: https://stackoverflow.com/a/3033455
" and: http://mm.iit.uni-miskolc.hu/Data/Supports/VIM/howto/format.html
"set textwidth=79

" Allow modified buffers to be put on background (by default, switched off
" buffers are closed, which prevents switching off buffers containing unsaved
" changes):
set hidden

" Allow backspacing over everything in insert mode:
set backspace=indent,eol,start

" Defines how special characters are shown:
set listchars=tab:▸\ ,eol:¬,trail:¤,nbsp:¤,extends:>,precedes:<
set list
" Highlights current line:
set cursorline
" Highlights 80th column:
set colorcolumn=80
" Highlights trailing whitespaces using syntax error colors:
highlight def link ExtraWhitespace Error
match ExtraWhitespace /\s\+$/

" Configure cursor shape.
" Enter insert mode (t_SI): switch to ibeam.
" Enter replace mode (t_SR): switch to underline.
" Return to normal mode (t_EI): switch to block.
" FIXME what about gvim? See :h guicursor
" FIXME remove tmux-specific condition?
" FIXME how to adapt cursor color depending on the text under it?
"if exists('$TMUX')
"    " When in tmux, ask it to pass the escape code to the terminal emulator.
"    let &t_SI = "\<Esc>Ptmux;\<Esc>\e[6 q\<Esc>\\"
"    let &t_SR = "\<Esc>Ptmux;\<Esc>\e[4 q\<Esc>\\"
"    let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"
"else
    let &t_SI = "\e[5 q"
    let &t_SR = "\e[5 q"
    let &t_EI = "\e[2 q"
    " Optional reset cursor on start.
    augroup myCmds
    au!
    autocmd VimEnter * silent !echo -ne "\e[2 q"
    augroup END
"endif
" FIXME
" Set active window to at least 30 lines:
"set winheight=30
" Set minimum lines to any split window to 5 lines:
"set winminheight=5

" Toggle insert paste mode.
set pastetoggle=<F2>


"==============================================================================
" GUI configuration
"-------------------

" Remove menu bar, toolbar and scroll bars:
set guioptions-=m
set guioptions-=T
set guioptions-=r
set guioptions-=L

"==============================================================================
" Coding settings
"-----------------
" FIXME set general and specific coding configuration
"
" Tab special character appear as 4 spaces:
set tabstop=4
set softtabstop=4
set shiftwidth=4

" FIXME to be enabled to use custom folding ?
" foldmarker=


" FIXME define how tab characters are shown, and what the <tab> key inserts
" see:
" https://stackoverflow.com/questions/1878974/redefine-tab-as-4-spaces?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa
" https://stackoverflow.com/questions/234564/tab-key-4-spaces-and-auto-indent-after-curly-braces-in-vim/21323445#21323445
"
" Special indentation rules for PostgreSQL project
" (see: https://www.postgresql.org/docs/current/static/source-format.html):
" FIXME to be checked
if match(getcwd(), "/pgsql") >=0 || match(getcwd(), "/postgresql") >= 0
  " C-indent style to apply (see: |cino-(|):
  set cinoptions=(0
  " Tab appear as 4 spaces long:
  set tabstop=4
  set shiftwidth=4
endif
" FIXME include pgindent call ?

" Enable syntax highlighting:
syntax on

"==============================================================================
" Color scheme configuration
"----------------------------
{# ANSIBLE VARIABLE SECTION START #}
" FIXME add an if clause?
source {{ theme_dir }}/current_theme.vim
{# ANSIBLE VARIABLE SECTION STOP #}

"==============================================================================
" Searching configuration
"-------------------------
" Show matches while typing search pattern with "/" or "?":
set incsearch
" Highlights search matches only during search (allowed by incsearch), not
" between searches:
augroup vimrc-incsearch-highlight
  autocmd!
  autocmd CmdlineEnter [/\?] :set hlsearch
  autocmd CmdlineLeave [/\?] :set nohlsearch
augroup END
" Ignore case in searches, except if upper case characters have been typed:
set ignorecase
set smartcase

"==============================================================================
" PostgreSQL administration
"---------------------------
" FIXME see plugins
" FIXME syntax color for conf files like pg_hba ?
" conf example:
" https://unencumberedbyfacts.com/2016/01/04/psql-vim-happy-face/
"
" FIXME Allow syntax highlightning while editing queries from psql
" (PostgreSQL):
autocmd BufRead /tmp/psql.edit.* set syntax=sql

"==============================================================================
" Custom mappings
"-----------------
" Find unused mappings: ":help map-which-keys", ":map", ":map!".
" Note: "<n>map" create a recursive mapping on "<n>" mode.
"       "<n>noremap" create a non recursive mapping on "<n>" mode;

" Useful keys for mapping that can easily be combined with other keys:
" -, _,  <space>, <cr>, <bs>.
" Function keys <F2>, <F3>, etc. (<F1> is reserved for :help).
" Shifted function keys <S-F1>, etc.

" Change <leader> key mapping from its default ("\") to use a more easy to
" type:
nnoremap <SPACE> <Nop>
let mapleader = "\<Space>"


" Add custom mode (using |vim-submode| plugin) to easily manage split windows.
" Inspired from: https://ddrscott.github.io/blog/2016/making-a-window-submode/
"
" Enter window mode using "<Leader>w":
call submode#enter_with('window', 'n', '', '<Leader>w')
" FIXME
" Note: <C-c> will also get you out to the mode without this mapping.
" Note: <C-[> also behaves as <ESC>
call submode#leave_with('window', 'n', '', '<ESC>')
" Create a map in the new mode for every existing <C-w>+? mappings:
for key in ['a','b','c','d','e','f','g','h','i','j','k','l','m',
\           'n','o','p','q','r','s','t','u','v','w','x','y','z']
  " Maps lowercase, uppercase and <C-key>:
  call submode#map('window', 'n', '', key, '<C-w>' . key)
  call submode#map('window', 'n', '', toupper(key), '<C-w>' . toupper(key))
  call submode#map('window', 'n', '', '<C-' . key . '>', '<C-w>' . '<C-'.key . '>')
endfor
" Go through symbols.  Sadly, '|', not supported in submode plugin.
for key in ['=','_','+','-','<','>']
  call submode#map('window', 'n', '', key, '<C-w>' . key)
endfor
" FIXME
" <lowercase-pipe> sets the width to 80 columns, pipe (<S-\>) by default
" maximizes the width:
call submode#map('window', 'n', '', '\', ':vertical resize 80<CR>')
" Resize faster:
call submode#map('window', 'n', '', '+', '3<C-w>+')
call submode#map('window', 'n', '', '-', '3<C-w>-')
call submode#map('window', 'n', '', '<', '10<C-w><')
call submode#map('window', 'n', '', '>', '10<C-w>>')

" FIXME Add some custom maps to navigate between Vim splits and Tmux panes.
" See: https://github.com/christoomey/vim-tmux-navigator
"nnoremap <silent> <M-h> :TmuxNavigateLeft<cr>
"nnoremap <silent> <M-j> :TmuxNavigateDown<cr>
"nnoremap <silent> <M-k> :TmuxNavigateUp<cr>
"nnoremap <silent> <M-l> :TmuxNavigateRight<cr>
"nnoremap <silent> {Previous-Mapping} :TmuxNavigatePrevious<cr>

" Add maps to switch to next / previous buffers on the list (like gt/gT for
" tabs).
nnoremap <leader>n :bnext<CR>
nnoremap <leader>p :bprevious<CR>
" Add map to flip-flop between last used buffers.
nnoremap <leader>b :b#<CR>
" Add map to delete current buffers.
nnoremap <leader>X :bdelete<CR>

" FIXME F2 used for paste mode.
" FIXME F3 ?

" Add mappings for menu list on NORMAL mode.
nnoremap <F4> :TagbarToggle<CR>
" Add mapping for Gundo undo tree on NORMAL mode.
nnoremap <F5> :GundoToggle<CR>

" CtrlP default mode (open file list) map previously set to: "<c-p><c-f>".
" Add CtrlP alternative modes maps.
" Open buffers list.
nnoremap <c-p><c-b> :CtrlPBuffer<CR>
" Open most recently used files list.
nnoremap <c-p><c-m> :CtrlPMRUFiles<CR>
" Open tags list.
nnoremap <c-p><c-t> :CtrlPTag<CR>
" Open quickfix list.
nnoremap <c-p><c-q> :CtrlPQuickfix<CR>

" FIXME quickfix and grep:
" see: https://medium.com/usevim/vim-101-quickfix-and-grep-c782cb65e524

" Remap escaping key to "jk" while on INSERT mode.
" See: http://learnvimscriptthehardway.stevelosh.com/chapters/10.html
inoremap jk <ESC>

" Map the ":update" command (save but only write if file has changed):
nnoremap <leader><leader> :update<CR>

" FIXME mapping to comment selected lines ?

" FIXME mapping to have "K" use "man", "help", etc. depending on file type
"set keywordprg=man
"nnoremap <expr> K (&filetype is# 'vim' ? (':help ' . fnameescape(expand('<cword>')) . "\n") : 'K')

" FIXME add mapping to open url under cursor on default browser?

" Training mode, disable non optimal keys to break bad habits.
" See: http://vimcasts.org/blog/2013/02/habit-breaking-habit-making/
" And: http://learnvimscriptthehardway.stevelosh.com/chapters/10.html
" Disable arrow keys to force using "hjkl":
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
" Disable esc key on INSERT mode to force using custom map "jk":
" FIXME this seems to also disable C-[ why is that?
inoremap <ESC> <NOP>
" FIXME disable "hjkl" to force using more optimal movement keys (word,
" sentence, paragraph, search, etc.).


" Mappings for Cscope searches, using <leader> key on NORMAL mode.
" Define minimal mappings, as per documentation:
" FIXME alter these mappings to use "c" as namespace (<leader>cfa, cl, etc.) ?
" FIXME
nnoremap <leader>fa :call CscopeFindInteractive(expand('<cword>'))<CR>
" FIXME
nnoremap <leader>l :call ToggleLocationList()<CR>
" Direct search mappings.
"   s: Find this C symbol:
nnoremap  <leader>fs :call CscopeFind('s', expand('<cword>'))<CR>
"   g: Find this definition:
nnoremap  <leader>fg :call CscopeFind('g', expand('<cword>'))<CR>
"   d: Find functions called by this function:
nnoremap  <leader>fd :call CscopeFind('d', expand('<cword>'))<CR>
"   c: Find functions calling this function:
nnoremap  <leader>fc :call CscopeFind('c', expand('<cword>'))<CR>
"   t: Find this text string:
nnoremap  <leader>ft :call CscopeFind('t', expand('<cword>'))<CR>
"   e: Find this egrep pattern:
nnoremap  <leader>fe :call CscopeFind('e', expand('<cword>'))<CR>
"   f: Find this file:
nnoremap  <leader>ff :call CscopeFind('f', expand('<cword>'))<CR>
"   i: Find files #including this file:
nnoremap  <leader>fi :call CscopeFind('i', expand('<cword>'))<CR>


